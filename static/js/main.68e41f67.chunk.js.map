{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["getCurrentTime","Date","toUTCString","slice","Clock","state","currentTime","timerId","this","window","setInterval","setState","console","info","prevProps","clockName","props","debug","clearInterval","className","Component","getRandomName","value","now","toString","App","hasClock","document","addEventListener","e","preventDefault","ReactDOM","render","getElementById"],"mappings":"6MAEA,SAASA,IACP,OAAO,IAAIC,MAAOC,cAAcC,OAAO,IAAK,GAWvC,IAAMC,EAAb,4MACEC,MAAQ,CACNC,YAAaN,KAFjB,EAKEO,QAAU,EALZ,uDAOE,WAA2B,IAAD,OACxBC,KAAKD,QAAUE,OAAOC,aAAY,WAChC,EAAKC,SAAS,CACZL,YAAaN,MAGfY,QAAQC,KAAK,EAAKR,MAAMC,eACvB,OAdP,gCAiBE,SAAmBQ,GACbA,EAAUC,YAAcP,KAAKQ,MAAMD,WAErCH,QAAQK,MAAR,uBAA8BH,EAAUC,UAAxC,eAAwDP,KAAKQ,MAAMD,cApBzE,kCAwBE,WACEN,OAAOS,cAAcV,KAAKD,WAzB9B,oBA4BE,WACE,IAAQQ,EAAcP,KAAKQ,MAAnBD,UAER,OACE,sBAAKI,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGJ,IAGF,YAED,sBAAMI,UAAU,cAAhB,SACGX,KAAKH,MAAMC,qBAxCtB,GAA2Bc,aCV3B,SAASC,IACP,IAAMC,EAAQrB,KAAKsB,MAAMC,WAAWrB,OAAO,GAE3C,MAAM,SAAN,OAAgBmB,GAQX,IAAMG,EAAb,4MACEpB,MAAQ,CACNqB,UAAU,EACVX,UAAW,WAHf,EAMER,QAAU,EANZ,uDAQE,WAA2B,IAAD,OACxBC,KAAKD,QAAUE,OAAOC,aAAY,WAChC,EAAKC,SAAS,CACZI,UAAWM,QAEZ,MAEHM,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAEC,iBAEF,EAAKnB,SAAS,CACZe,UAAU,OAIdC,SAASC,iBAAiB,SAAS,WACjC,EAAKjB,SAAS,CACZe,UAAU,SAzBlB,oBA8BE,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,6CAECX,KAAKH,MAAMqB,UAAY,cAAC,EAAD,CAAOX,UAAWP,KAAKH,MAAMU,mBAnC7D,GAAyBK,aCZzBW,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.68e41f67.chunk.js","sourcesContent":["import { Component } from 'react';\n\nfunction getCurrentTime() {\n  return new Date().toUTCString().slice(-12, -4);\n}\n\ninterface State {\n  currentTime: string;\n}\n\ninterface Props {\n  clockName: string;\n}\n\nexport class Clock extends Component<Props, State> {\n  state = {\n    currentTime: getCurrentTime(),\n  };\n\n  timerId = 0;\n\n  componentDidMount(): void {\n    this.timerId = window.setInterval(() => {\n      this.setState({\n        currentTime: getCurrentTime(),\n      });\n      // eslint-disable-next-line no-console\n      console.info(this.state.currentTime);\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props): void {\n    if (prevProps.clockName !== this.props.clockName) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevProps.clockName} to ${this.props.clockName}`);\n    }\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.timerId);\n  }\n\n  render() {\n    const { clockName } = this.props;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {clockName}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {this.state.currentTime}\n        </span>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './App.scss';\nimport { Clock } from './Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport interface State {\n  hasClock: boolean,\n  clockName: string,\n}\n\nexport class App extends Component<{}, State> {\n  state = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  timerId = 0;\n\n  componentDidMount(): void {\n    this.timerId = window.setInterval(() => {\n      this.setState({\n        clockName: getRandomName(),\n      });\n    }, 3300);\n\n    document.addEventListener('contextmenu', (e) => {\n      e.preventDefault();\n\n      this.setState({\n        hasClock: false,\n      });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({\n        hasClock: true,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {this.state.hasClock && <Clock clockName={this.state.clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}